openapi: '3.0.2'

info:
  version: 1.0.0
  title: onboarding-firas

servers:
  - url: '{protocol}://localhost:8080'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http

paths:
  /authors:
    get:
      tags:
        - author
      operationId: getAuthors
      parameters:
       - name: limit
         description: number of returned results
         in: query
         schema:
           type: integer
           default: 10
       - name: offset
         description: offset of returned results
         in: query
         schema:
           type: integer
           default: 0
      responses:
        200:
          description: operation successful
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/authorList'

    post:
      tags:
      - author
      summary: Add a new author
      operationId: addAuthor
      requestBody:
        description: Author to add. Cannot null or empty.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/author'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/author'
        required: true
      responses:
        201:
          description: Author created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/author'

  /authors/{id}:
    get:
      tags:
        - author
      operationId: getAuthorById
      parameters:
       - name: id
         description: id of author
         in: path
         schema:
           type: integer
           format: int64
           default: 0
      responses:
        200:
          description: operation successful
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/author'

    put:
      tags:
        - author
      summary: Update an existing author
      operationId: updateAuthor
      parameters:
        - name: id
          in: path
          description: Id of the author to be update. Cannot be empty.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Author to update. Cannot null or empty.
        content:
          application/hal+json:
            schema:
              $ref: '#/components/schemas/author'
        required: true
      responses:
        404:
          description: Contact not found
        405:
          description: Validation exception
        400:
          description: Invalid ID supplied
        200:
          description: successful operation

    delete:
      tags:
        - author
      summary: Deletes an author
      operationId: deleteAuthorById
      parameters:
        - name: id
          description: id of author
          in: path
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: operation successful
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/author'

  /blogs:
    get:
      tags:
        - blog
      operationId: getBlogs
      parameters:
        - name: limit
          description: number of returned results
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          description: offset of returned results
          in: query
          schema:
            type: integer
            default: 0
      responses:
        200:
          description: operation successful
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/blogList'

    post:
      tags:
        - blog
      summary: Add a new blog
      operationId: addBlog
      requestBody:
        description: Blog to add. Cannot null or empty.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/blog'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/blog'
        required: true
      responses:
        201:
          description: Blog created
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/blog'

  /blogs/{id}:
    get:
      tags:
        - blog
      operationId: getBlogById
      parameters:
        - name: id
          description: id of blog
          in: path
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        200:
          description: operation successful
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/blog'

    put:
      tags:
        - blog
      summary: Update an existing blog
      operationId: updateBlog
      parameters:
        - name: id
          in: path
          description: Id of the blog to be update. Cannot be empty.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Blog to update. Cannot null or empty.
        content:
          application/hal+json:
            schema:
              $ref: '#/components/schemas/blog'
        required: true
      responses:
        404:
          description: Blog not found
        405:
          description: Validation exception
        400:
          description: Invalid ID supplied
        200:
          description: successful operation

    delete:
      tags:
        - blog
      summary: Deletes an blog
      operationId: deleteBlogById
      parameters:
        - name: id
          description: id of blog
          in: path
          schema:
            type: integer
            format: int64
      responses:
        404:
          description: Blog not found
        200:
          description: successful operation

  /testVI:
    get:
      tags:
        - testVI
      operationId: getStringTest
      responses:
        200:
          description: operation successful
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/testVI'

components:
  schemas:

    authorList:
      type: object
      description: pageable list of authors
      required:
        - _links
        - _embedded
      properties:
        _embedded:
          type: array
          description: current page of list of found authors
          items:
            $ref: '#/components/schemas/author'
        _links:
          type: object
          required:
            - self
          properties:
            self:
              $ref: '#/components/schemas/halLink'
            next:
              $ref: '#/components/schemas/halLink'
            previous:
              $ref: '#/components/schemas/halLink'

    author:
      type: object
      description: author with first and last name
      required:
        - id
        - firstname
        - lastname
        # - blogs
      properties:
        id:
          type: integer
          format: int64
        firstname:
          type: string
        lastname:
          type: string
        # blogs:
        #   type:
        #     self:
        #       $ref: '#/components/schemas/blogList'
        _links:
          type: object
          required:
            - self
          properties:
            self:
              $ref: '#/components/schemas/halLink'

    blog:
      type: object
      description: author with first and last name
      required:
        - id
        - title
        - text
        - author
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        text:
          type: string
        author:
          type: string
        _links:
          type: object
          required:
            - self
          properties:
            self:
              $ref: '#/components/schemas/halLink'

    blogList:
      type: object
      description: pageable list of blogs
      required:
        - _links
        - _embedded
      properties:
        _embedded:
          type: array
          description: current page of list of found blogs
          items:
            $ref: '#/components/schemas/blog'
        _links:
          type: object
          required:
            - self
          properties:
            self:
              $ref: '#/components/schemas/halLink'
            next:
              $ref: '#/components/schemas/halLink'
            previous:
              $ref: '#/components/schemas/halLink'

    testVI:
      type: object
      description: string test
      required:
        - value
      properties:
        value:
          type: string
        _links:
          type: object
          required:
            - self
          properties:
            self:
              $ref: '#/components/schemas/halLink'


    halLink:
      type: object
      required:
        - href
      properties:
        href:
          type: string
        method:
          type: string
          enum: [GET, POST, DELETE]
        templated:
          type: boolean

    error:
      type: object
      required:
        - id
        - code
      properties:
        id:
          type: string
        code:
          type: string
        message:
          type: string
